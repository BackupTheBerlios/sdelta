#!/bin/bash


load_config()  {
  if    [     -x  ${SDREQ_CONFIG:=~/.sdreq/config}  ]
  then         .  ${SDREQ_CONFIG}
        SDREQ_DIR=${SDREQ_CONFIG%/*}
  else  SDREQ_DIR=${SDREQ_CONFIG%/*}
    mkdir  -p     ${SDREQ_DIR}/have  \
                  ${SDREQ_DIR}/log   \
                  ${SDREQ_DIR}/sd    \
                  ${SDREQ_DIR}/tmp   \
                  ${SDREQ_DIR}/want  \
                  ${SDREQ_DIR}/waiting
    config_menu
    exit  1
  fi
}


save_config()  {
  (
    echo  " EMAIL=$EMAIL"
    echo  "   FTP=$FTP_NAME"
    echo  "NOTIFY=$NOTIFY"
    echo  "UPLOAD=$UPLOAD"
  )  >        $SDREQ_CONFIG
  chmod  a+x  $SDREQ_CONFIG
}


not()  {  if  $1;  then  echo  "false";  else  echo  "true";  fi  }


inputbox()  {
  local  OK  PLEASE
      OK=$"Done"
  PLEASE=$"Please enter a new value for"

  $DIALOG  --ok-label      "$OK"  \
           --no-cancel            \
           --default-item  "$1"   \
           --inputbox             \
           "$3  $PLEASE $1:"      \
           0 0 "$2"
}


config_menu()  {
  local  COMMAND  OK  CANCEL  HELP

  NOTIFY="${NOTIFY:-false}"
  UPLOAD="${UPLOAD:-false}"
   EMAIL="${EMAIL:-$LOGNAME$HOSTNAME}"

  while
         OK=$"Select"
     CANCEL=$"Done"
       HELP=$"Please configure how sdreq should function
Upon completion of patch generation sdelta@ibiblio.org 
can send an email notifying pick up is ready.
Patches can also be uploaded directly to a FTP server."
    E_HELP=$"Email address.           Example: $LOGNAME@$HOSTNAME"
    F_HELP=$"FTP upload information.  Example: ftp://$LOGNAME:password@ftp.mydom.com/pub/uploads"
    N_HELP=$"Receive an email upon sdelta generation completion?"
    U_HELP=$"Upload sdelta patches to your ftp server?"
    COMMAND=$(  $DIALOG  --title        $"Configuration Menu"  \
                         --item-help                \
                         --ok-label      "$OK"      \
                         --cancel-label  "$CANCEL"  \
                         --menu          "$HELP"    \
                         16 60 6                    \
                         "EMAIL"         "$EMAIL"        "$E_HELP"  \
                         "FTP"           "$FTP"          "$F_HELP"  \
                         "NOTIFY"        "$NOTIFY"       "$N_HELP"  \
                         "UPLOAD"        "$UPLOAD"       "$U_HELP"  )

  do
    case  $COMMAND  in
      NOTIFY)    NOTIFY=$(  not  "$NOTIFY"  )  ;;
      UPLOAD)    UPLOAD=$(  not  "$UPLOAD"  )  ;;
           *)  declare  $COMMAND="$(  inputbox  "$COMMAND"  "${!COMMAND}"  ""  )"
    esac
  done
  save_config
}


help() {
  echo  $"$COPYRIGHT"
  echo
  echo  $"Usage: sdreq [command]"
  echo  $"Commands:"
  echo  $"want		request sdelta patches from http://ibiblio.org/sdelta"
  echo  $"download	retrieve previously requested sdelta patches"
  echo  $"new		apply patches to create new files"
  echo  $"config		reconfigure sdreq"
  echo
  echo  $"Preparation is required before executing sdreq want."
  echo  $"Please read /usr/share/sdelta/sdreq_README first."
}


list()        { find $1 -follow -type f -not -empty -printf "%P\n"; }
list_empty()  { find $1 -follow -type f      -empty -printf "%P\n"; }

tars()  {
  sed  "s:\.tgz$:.tar:
        s:\.tar.bz2$:.tar:
        s:\.tar.gz$:.tar:
        s:\.tar.7z$:.tar:"  |
  sort  -u
}


basenames()  {  sed  "s:.*[/]::"  |  sort  -u;  }


post()  {
 curl  -m 60  -F "request=@$1;type=text/plain"  \
       http://ibiblio.org/sdelta/php/request.php
}


request_patches()  {
  LOG=$SDREQ_DIR/log/$(date  "+%Y-%m-%d-%H:%M" )

  (
    if [ "$NOTIFY" == "true" ]; then echo "NOTIFY	$EMAIL"; fi
    if [ "$UPLOAD" == "true" ]; then echo "UPLOAD	$FTP"; fi

    while  read
    do     touch  "$SDREQ_DIR/waiting/$REPLY"
           echo                      "$REPLY"
    done
  )  >>  $LOG

  if    grep  -q  "\.sd\."  $LOG  2>/dev/null
  then  post  $LOG
  fi
}


match()  {
  local  BEST  FILE  FOUND  LEN

  LEN="${#1}"
  (( LEN = LEN - 5  ))

  while
    FOUND="$(  grep  "^${1:0:$LEN}"  $SDREQ_DIR/tmp/have.tars  )"
    [  -z  "$FOUND"  ]  &&  ((  LEN > 2  ))
  do
    ((  LEN--  ))
  done

  echo   "$FOUND"  |
  while  read
  do     grep  "$REPLY"  $SDREQ_DIR/tmp/have.files
  done  |
  while  read;  do
    if    [  -z  "$BEST"  ]  ||
          [ $SDREQ_DIR/have/$REPLY  -nt  $SDREQ_DIR/have/$BEST  ]
    then  BEST="$REPLY"
          echo "$REPLY"
    fi
  done  |  tail  -n 1

}


sdelta_names()  {
  local  BEST  REPLY
  while  read;  do
    BEST="$(  match  "$REPLY"  )"
    if    [  -n          "$BEST"  ]
    then  echo  "$( echo  $BEST  |
                    tars         |
                    basenames    )-$REPLY.sd.bz2"
    fi
  done
}


want() {
  list        $SDREQ_DIR/have/           |
  tee         $SDREQ_DIR/tmp/have.files  |
  basenames                              |
  tars    >   $SDREQ_DIR/tmp/have.tars

  list_empty  $SDREQ_DIR/want/  |
  basenames                     |
  tars                          |
  sdelta_names                  |
  request_patches
}


clean()  {
  find   $1  -follow  -type f  -empty  -mtime +$2  |
  xargs  -l16  rm  -f
}


download()  {
  local  HTS
         HTS="http://ibiblio.org/sdelta/patches"

  mkdir  -p   $SDREQ_DIR/tmp/receiving
  cd          $SDREQ_DIR/tmp/receiving

  list_empty  $SDREQ_DIR/waiting/  |
  while  read;  do
    if  !  [  -f  $SDREQ_DIR/sd/$REPLY  ];  then
      echo  "Download  $REPLY"
      if    curl  -C -  -L  -O  --connect-timeout 120  "$HTS/$REPLY"
      then  rm    -f                     "$SDREQ_DIR/waiting/$REPLY"
            mv                     "$SDREQ_DIR/tmp/receiving/$REPLY"  \
                                   "$SDREQ_DIR/sd/"
      fi
    fi
  done

  clean  $SDREQ_DIR/waiting  14
}


apply()  {
  list   $SDREQ_DIR/sd/  |
  sed    -r  "s:(.*):\1	\1:
              s:	(.*)\.tar-(.*)\.tar\.sd\.bz2:	\2.tar:"  |
  while  read  PATCH  TO;  do
    FROM="$(  match  $TO  )"
      TO="$(  list_empty   $SDREQ_DIR/want/  |
              grep   $TO                     |
              head  -n  1                    )"
    if    sd      $SDREQ_DIR/have/$FROM  \
                  $SDREQ_DIR/sd/$PATCH   \
                  $SDREQ_DIR/want/$TO
    then  rm  -f                       $SDREQ_DIR/sd/$PATCH
    else  rm  -f  $SDREQ_DIR/want/$TO  $SDREQ_DIR/sd/$PATCH
          touch   $SDREQ_DIR/want/$TO
          false
    fi
  done
  clean  $SDREQ_DIR/want  14
}


DIALOG="dialog
--backtitle
Sdelta Patch Request, Download and Application Tool
--stdout"




TAB="	"
 LF="
"

export  IFS="$TAB$LF"

COPYRIGHT="sdreq by Kyle Sallee Copyright 2005, all rights reserved."

load_config
case  $1  in
      want)  want         ;;
  download)  download     ;;
       new)  apply        ;;
    config)  config_menu  ;;
         *)  help         ;;
esac
true
