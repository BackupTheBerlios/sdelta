	What is sdelta?

sdelta is a line blocking dictionary compressor.
Line blocking means that it makes blocks out of lines,
and therefore blocks are often aligned on line boundaries.
Dictionary compressor means that it uses the first file as a dictionary.
The second file can be expressed as a combination 
of references into the dictionary file and the 
blocks that are not in the dictionary file.


	Why sdelta?

sdelta has one primary purpose.
It is used to minimize bytes transferred to update 
previously downloaded source tarballs to current versions.
sdelta is designed to create tight deltas of text files.
Tarballs for sources are full of text files.
sdelta works extremely well on these.

Version releases of source tarballs are often 
85% or more identical to the previous release.
When upgrading installed software why download 
completely new source tarballs when the box 
already has source tarballs for previous versions?
The previously downloaded source tarballs already contain 
85% to 90% of the same data as the new source tarballs.
Why not download only the new data and 
references to the data one already has?
Download sdelta upgrade patches at 10% the size and 
10 times the speed of transferring full source tarballs.

	How does sdelta work?

sdelta attempts to find long matching sequences 
of line aligned bytes in both files.
It outputs references to the data both files have 
in common and the new data in the second file.


	How well does sdelta perform compared to xdelta?

sdelta is designed specifically for creating 
deltas of uncompressed tar files of sources.
Therefore, it is very good at that.
However using a dynamic block size instead 
of a fixed size causes sdelta generation to
take longer and require more memory than 
dictionary compressors like xdelta which 
use a fixed 16 byte block size.
xdelta is available from http://xdelta.sourceforge.net

The following is a comparison of sdelta and xdelta 
on a very large dictionary file and message file.
The numbers with current sdelta may vary as it has 
undergone some optimizations to make it more suitable
for matching against dissimilar dictionary files.

bytes		file name
197888000	linux-2.6.7.tar		<- dictionary file
200847360	linux-2.6.8.1.tar	<- message    file

2053118		linux-2.6.7-linux-2.6.8.1.tar.sdelta.bz2
3190401		linux-2.6.7-linux-2.6.8.1.tar.xdelta.bz2

In the above comparison both the xdelta and sdelta patch
files were generated with compression disabled.
Finally, each delta file was compressed with bzip2.

In this example a 3 megabyte xdelta is far faster 
to download than a 34 megabyte linux-2.6.8.1.tar.bz2
However the 2 megabyte bzip2 compressed sdelta 
file is 1/3 faster to transfer and 1/3 smaller 
to download than the xdelta for the above files.

Replicating the above example can yield:

6.9M linux-2.6.7-linux-2.6.8.1.tar.xdelta or
3.2M linux-2.6.7-linux-2.6.8.1.tar.xdelta
and
13M linux-2.6.7-linux-2.6.8.1.tar.sdelta

Now type:
bzip2 -9 linux-2.6.7-linux-2.6.8.1.tar.sdelta
Like sorcery the 13M file shrinks down to 2M.

13M  sdelta bzip2 becomes 2M
6.9M xdelta bzip2 becomes 3M
Do the numbers seem counter intuitive?
Fortunately, the explanation is not complex.

xdelta and sdelta are both delta generators 
and also both dictionary compressors.
The uncompressed xdelta is smaller than 
the uncompressed sdelta because the xdelta 
contains more references to matching data 
than the sdelta does.
References to matching data is a form of compression.
Therefore, the reference portion of a delta is nearly
incompressible by advanced compression program such as bzip2.
The bzip2 of the sdelta compresses better because
it has far more compressible data than the xdelta.

The compressed sdelta is smaller than the compressed xdelta.
The quality of the fewer matches in the sdelta are better
than the quality of the many matches in the xdelta.
Quality over quantity prevails.

An optimal delta generator would search all possible offsets 
in the dictionary file for matches with all possible offsets
in the message file.  Yes this is possible.
Unfortunately, it consumes vasts amounts of memory and CPU time.
That is why neither sdelta nor xdelta do this.

Both sdelta and xdelta match blocks, a block is a series of bytes.
They match non overlapping blocks in the 
dictionary file with blocks in the message file.
Matching non overlapping blocks from the dictionary file
with offsets in the message file is far less memory intensive
and time consuming than attempting to find optimal matches.
Unfortunately, the cost for this performance is that
blind spots are created where matches can not be found.

Both sdelta and xdelta suffer from blind spots.
xdelta uses a fixed size 16 byte block which creates 
small and numerous blind spots at fixed intervals.
sdelta uses a dynamic block size aligned to lines.
This helps minimize the impact of sdelta's much 
larger and more advantageously positioned blind spots.

Both sdelta and xdelta find matches.
sdelta will always find the whole matching 
line and write a single reference to it and
all matching lines that follow until a line
is detected which does not match.
sdelta will not reference a line where only a portion matches.

xdelta will find and match 16 bytes within a line.
xdelta's reference to the match will probably not include the start 
and end of the line because those are probably within a blind spot.
Lines are not usually paragraph, 16 bytes, aligned 
and have lengths in multiples of 16 bytes.
The quality of the match is reduced by the amount 
of data not referenced that ends up in blind zones.
Omitting a verbose explanation this the
loss of quality can be minor or menace.
A few bytes lost here and there add up.

xdelta excels at finding matches within unknown data types.
However xdelta neglects exploiting the 
natural dynamic line blocking method of text.
This is why sdelta is on average superior at 
producing deltas of source tarballs and text files.
Conversely, xdelta will in most instances 
produce smaller deltas of binary data.
Neither produce small deltas of compressed data.

A dictionary compressor is good at some types of matches.
However bzip2 using the Burrows-Wheeler block sorting 
text compression algorithm and Huffman coding is 
even better at compressing some types of data.
Because sdelta finds quality matches with less 
impact from blind spots it passes more data to bzip2 
that bzip2 can compress even better than sdelta.

Here is how it compared on medium and small source tarballs:

85M  glibc-2.3.2.tar			<- message file
1.1M glibc-2.3.2-2.3.3.tar.sdelta.bz2	<- 1.1M bzip2 sdelta patch file
1.8M glibc-2.3.2-2.3.3.tar.xdelta.bz2	<- 1.8M bzip2 xdelta patch file

3.0M   polypaudio-0.4.tar			<- message file
33759  polypaudio-0.3-0.4.tar.sdelta.bz2	<- 26% smaller bzip2 sdelta
45088  polypaudio-0.3-0.4.tar.xdelta.bz2	<- larger bzip2 xdelta

sdelta by default will match lines that are 5 bytes or longer.
The smaller minimal block length offers no advantage 
for sdelta over xdelta's 16 byte blocks.
Before invoking sdelta issue:

export SDELTA_LAZY=15

Even with a minimum initial block matching size of 16 bytes,
like xdelta 16 byte blocks,
the sdelta patch file has increased very little in size.
Now issue:

export SDELTA_LAZY=20

Now sdelta will locate initial matches in 
blocks that are no shorter than 21 bytes.
Still sdelta is looking good.
sdelta using dynamically sized blocks aligned 
to the natural line by line blocking of text files 
enables sdelta to produced excellent deltas of textual data.

Because xdelta is a more aggressive match finder the 
difference between the compressed sdelta and xdelta 
patch file will vary depending on the quality of the compressor used.
1.4M glibc-2.3.2-2.3.3.tar.sdelta.gz
1.9M glibc-2.3.2-2.3.3.tar.xdelta.gz

Using gzip -9 instead of bzip2 -9 the proportional size difference
between the two patch files is less than when using bzip2.
Because the quality can vary greatly depending on the 
type of compression used on the sdelta I chose to let
you decide what compression program to use rather than 
automatically recognize encode and decode bzip2 streams.
I admit I was tempted since the bzip2 library provides 
an excellent and easy to use interface functions.
Do not send me a patch for that functionality because 
I already have it, tried it, and decided to implement it without.


	Is something this good free?

Certainly sdelta is free!
The license that governs the use, modification 
and redistribution of sdelta is enclosed as LICENSE.

sdelta would not be as good without other freely available 
high quality software like gzip and bzip2 compressors,
and of course rsync which inspired xdelta which inspired sdelta.

Although sdelta is free please consider yourself morally obligated 
to help the free software revolution by contributing time effort or 
your own high quality free software that you design and implement.

sdelta is implemented to compile and run on 
glibc Linux boxes of any endian architecture.
sdelta comes with no warranty.
If it breaks then you can keep the pieces.
Provide bug reports if you want fixes.
Send them to cromwell@ibiblio.org.
Send improvements and code optimization as 
well if you want it to go faster for everyone.

sdelta was written without copying source code from other sources.
sdelta is not a fork, clone nor copy, of other software project.
Although similar in goal to xdelta the aproach of using dynamically
sized line aligned blocks is a radical departure from xdelta's fixed
block code making sdelta as similar to xdelta as bzip2 is to gzip.

After years of using xdelta, a valuable tool, 
I decided out of curiosity to examine the code.
At first glace, I thought xdelta produces amazingly
small delta files considering it's blind spots.
I then decided to write sdelta because I knew it 
could be better for creating deltas of source tarballs.
Creating deltas of source tarballs is primarily what I used xdelta for.
Now I use sdelta.

My thanks to Joshua MacDonald, because without xdelta 
I might not have decided to design and implement sdelta.
sdelta is not a better xdelta.
However it does generate better deltas for source tarballs.
xdelta is still the king of delta generators.  Hail to the king.
sdelta is merely the duke of text delta generators.
