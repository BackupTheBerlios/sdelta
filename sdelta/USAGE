Terse explanation:

To generate a patch:  $ sdelta  old  new    >  patch
To apply    a patch:  $ sdelta  old  patch  >  new


Verbose explanation:

Here is an example where we generate a sdelta patch file
for an upgrade of glibc from version 2.3.2 to version 2.3.3.

First, generate the sdelta upgrade patch file.

$ sdelta  glibc-2.3.2.tar  glibc-2.3.3.tar  >  glibc-2.3.2-2.3.3.sdelta

Now compress it with your favorite compression program:

$ bzip2                                glibc-2.3.2-2.3.3.tar.sdelta
$ 7za    a  glibc-2.3.2-2.3.3.tar.7za  glibc-2.3.2-2.3.3.tar
$ gzip  -9                             glibc-2.3.2-2.3.3.tar

956K  glibc-2.3.2-2.3.3.tar.7za
1.1M  glibc-2.3.2-2.3.3.tar.bz2
1.4M  glibc-2.3.2-2.3.3.tar.gz

The better the compression program the smaller 
the compressed sdelta patch file will be.
Any of the above 3 is preferable to transfering 
13M  glibc-2.3.3.tar.bz2  or
17M  glibc-2.3.3.tar.bz2


Now send the tiny sdelta patch to a box 
that has only the old glibc source tarball.

Finally, apply the patch to generate a new glibc source tarball:

sdelta  glibc-2.3.2.tar  glibc-2.3.2-2.3.3.tar.sdelta  >  glibc-2.3.3.tar

Now you can extract the new glibc-2.3.3 source from the 
tarball using $ tar -xf glibc-2.3.3.tar and begin compiling.

Note that sdelta works on uncompressed source tarballs.
Doing a sdelta of glibc-2.3.2.tar.bz2 and glibc-2.3.3.tar.bz2
will probably yield a horribily large sdelta patch file if
it works at all.

sdelta does work for generating patch files 
for binary data and not just source tarballs.
However with non text/source data compressed
sdelta patch files may be larger than an 
equivalently compressed xdelta patch file.
Think sdelta for source and xdelta for binary patch files.
